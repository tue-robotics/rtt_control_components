import("rtt_tracing")
import("rtt_source_components")

var double Ts = 0.0001
var int buffersize = 16384

loadComponent("Ramp","SOURCES::RampSignal")
setActivity("Ramp",Ts,HighestPriority,ORO_SCHED_RT)
Ramp.vector_size = 2
Ramp.slope = array ( 2.0, -1.0 )
Ramp.configure

loadComponent("Clock","SOURCES::Clock")
setActivity("Clock",Ts,HighestPriority,ORO_SCHED_RT)
Clock.vector_size = 1
Clock.configure


var ConnPolicy tracingpolicy
tracingpolicy.type = BUFFER
tracingpolicy.size = buffersize
tracingpolicy.lock_policy = LOCKED

loadComponent("Tracing","Signal::Tracing")
setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
Tracing.vector_sizes = array ( 1.0, 2.0 )
Tracing.buffersize = buffersize
Tracing.filename = "data2.txt"
Tracing.Ts = Ts
Tracing.Crash_if_done = True; #This way the controllers are terminated after gathering data
Tracing.configure
connect ("Clock.out","Tracing.in1", tracingpolicy )
connect ("Ramp.out","Tracing.in2", tracingpolicy )


#Makingfunofcheckerboardcharly


Ramp.start
Clock.start
Tracing.start
#Reporter.start
